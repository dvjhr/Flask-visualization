# -*- coding: utf-8 -*-
"""03_LabellingRevisi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dh3QRnP7-780Ijft3D3Jf7nSrmUIAE0-
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score

# Membaca dataset dari file CSV
df = pd.read_csv('dataset_with_sentiment.csv')

X = df['komentarClean']
y = df['sentimen']

tfidf_vectorizer = TfidfVectorizer()
X_tfidf = tfidf_vectorizer.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

decision_tree = DecisionTreeClassifier()
decision_tree.fit(X_train, y_train)

y_pred = decision_tree.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')

print(f"Accuracy: {accuracy*100:.2f}%")
print(f"Precision: {precision*100:.2f}%")
print(f"Recall: {recall*100:.2f}%")
print(f"F1 Score: {f1*100:.2f}%")

import seaborn as sns
import matplotlib.pyplot as plt

cm = confusion_matrix(y_test, y_pred)
labels = df['sentimen'].unique()

plt.figure(figsize=(10, 7))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=labels, yticklabels=labels)
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()

# Dapatkan prediksi untuk seluruh dataset
y_all_pred = decision_tree.predict(tfidf_vectorizer.transform(X))

# Menambahkan kolom prediksi ke dataframe asli
df['prediksi_sentimen'] = y_all_pred

# Simpan dataframe ke file CSV
df[['komentarClean', 'cluster', 'sentimen']].to_csv('dataset_with_predictions.csv', index=False)

"""# KODE UNTUK PREDIKSI DATA YANG BARU"""

new_df = pd.read_csv('datasetForPrediction.csv')

# Ekstraksi fitur dengan TF-IDF
X_new = tfidf_vectorizer.transform(new_df['komentarClean'])

# Prediksi sentimen
y_new_pred = decision_tree.predict(X_new)

# Menggabungkan hasil prediksi
new_df['prediksi_sentimen'] = y_new_pred

new_df.head()

# Simpan dalam CSV
new_df[['komentarClean', 'cluster', 'prediksi_sentimen']].to_csv('finalDataset.csv', index=False)