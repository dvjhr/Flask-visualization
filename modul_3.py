# -*- coding: utf-8 -*-
"""03_LabelingWNaiveBayes [DONE].ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13HrnoN6LTLXeqTFlWtY1VP2snS4pn7QL
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

import time
from IPython.display import display
import matplotlib.pyplot as plt
# %matplotlib inline

import nltk
import re

file = 'datasetWclusters.csv'

import csv


# tentukan lokasi file, nama file, dan inisialisasi csv
f = open(file, 'r')
reader = csv.reader(f)

# membaca baris per baris
#for row in reader:
#	print (row)

# menutup file csv
f.close()
#print("DAFTAR TWEETS YANG TELAH DIAMBIL")

#initialize stopWords
stopWords = []

#start replaceTwoOrMore
def replaceTwoOrMore(s):
    #look for 2 or more repetitions of character and replace with the character itself
    pattern = re.compile(r"(.)\1{1,}", re.DOTALL)
    return pattern.sub(r"\1\1", s)
#end

#start getStopWordList
def getStopWordList(stopWordListFileName):
    #read the stopwords file and build a list
    stopWords = []
    stopWords.append('AT_USER')
    stopWords.append('URL')

    fp = open(stopWordListFileName, 'r')
    line = fp.readline()
    while line:
        word = line.strip()
        stopWords.append(word)
        line = fp.readline()
    fp.close()
    return stopWords
#end

#import regex
import re
#start process_tweet
def processTweet(tweet):
    # process the tweets
    #Convert to lower case
    tweet = tweet.lower()
    #Convert www.* or https?://* to URL
    tweet = re.sub('((www\.[^\s]+)|(https?://[^\s]+))','URL',tweet)
    #Convert @username to AT_USER
    tweet = re.sub('@[^\s]+','AT_USER',tweet)
    #Remove additional white spaces
    tweet = re.sub('[\s]+', ' ', tweet)
    #Replace #word with word
    tweet = re.sub(r'#([^\s]+)', r'\1', tweet)
    #trim
    tweet = tweet.strip('\'"')
    return tweet
#end

#start getfeatureVector
def getFeatureVector(tweet):
    featureVector = []
    #split tweet into words
    words = tweet.split()
    for w in words:
        #replace two or more with two occurrences
        w = replaceTwoOrMore(w)
        #strip punctuation
        w = w.strip('\'"?,.')
        #check if the word stats with an alphabet
        val = re.search(r"^[a-zA-Z][a-zA-Z0-9]*$", w)
        #ignore if it is a stop word
        if(w in stopWords or val is None):
            continue
        else:
            featureVector.append(w.lower())
    return featureVector
#end

#Read the tweets one by one and process it
fp = open('testSentimen.csv', 'r')
line = fp.readline()

stopWords = getStopWordList('stopwordsID.txt')

while line:
    processedTweet = processTweet(line)
    featureVector = getFeatureVector(processedTweet)
    #print (featureVector)
    line = fp.readline()
#end loop
fp.close()
print()
#print("DAFTAR STOPWORD")
print()

import array as arr
import csv

#Read the tweets one by one and process it
inpTweets = csv.reader(open('testSentimen.csv', 'r'), delimiter=',', quotechar='|')
tweets = []
featureList = []
for row in inpTweets:
    sentiment = row[0]
    tweet = row[1]
    processedTweet = processTweet(tweet)
    featureVector = getFeatureVector(processedTweet)
    tweets.append((featureVector, sentiment))
    featureList = featureList + featureVector
#end loop
#print("FEATURE LIST")
print()
#print (tweets)
#print (featureList)

#start extract_features
def extract_features(tweet):
    tweet_words = set(tweet)
    features = {}
    for word in featureList:
        features['contains(%s)' % word] = (word in tweet_words)
    return features
#end

ini = processTweet('baru saja donor darah, tangan saya masih sakit')
ini2 = getFeatureVector(ini)
ini3 = extract_features(ini2)
#print (ini3)
pos = 0
neg = 0
neu = 0

#Read the tweets one by one and process it
fp = open('datasetWclusters.csv', 'r')
line = fp.readline()


stopWords = getStopWordList('stopwordsID.txt')

#end loop
#fp.close()
import nltk.classify
# Remove featureList duplicates
featureList = list(set(featureList))

# Generate the training set
training_set = nltk.classify.util.apply_features(extract_features, tweets)

# Train the Naive Bayes classifier
NBClassifier = nltk.NaiveBayesClassifier.train(training_set)

# Test the classifier
#testTweet = 'baru saja donor darah, tangan saya masih sakit'
testTweet = 'komentarClean'
processedTestTweet = processTweet(testTweet)
sentiment = NBClassifier.classify(extract_features(getFeatureVector(processedTestTweet)))
print ("testTweet = %s, sentiment = %s\n" % (testTweet, sentiment))
x = 0
sentimen=[]
while line:
    processedTweet = processTweet(line)
    featureVector = getFeatureVector(processedTweet)
#    #print (featureVector)
    line = fp.readline()
    testTweet = processedTweet
    processedTestTweet = processTweet(testTweet)
    sentiment = NBClassifier.classify(extract_features(getFeatureVector(processedTestTweet)))
    sentimen.append(sentiment)
    print ("testTweet = %s, sentiment = %s\n" % (featureVector, sentiment))

    myData=featureVector
    x = x + 1
    if sentiment == 'positive':
        pos = 1 + pos
    elif sentiment == 'negative':
        neg = 1 + neg
    elif sentiment == 'neutral':
        neu = 1 + neu

print(x)
print()
print("ANALISIS SENTIMEN")
print()

print('Jumlah Sentiment Positive : ')
print(pos)
print('Jumlah Sentiment Negative : ')
print(neg)
print('Jumlah Sentiment Neutral :')
print(neu)

"""# TEST"""

import pandas as pd

df = pd.read_csv('datasetWclusters.csv')

df

def get_sentiment(tweet):
    processed_tweet = processTweet(tweet)
    feature_vector = getFeatureVector(processed_tweet)
    sentiment = NBClassifier.classify(extract_features(feature_vector))
    return sentiment

df['sentimen'] = df['komentarClean'].apply(get_sentiment)

df

# ditambahkan kolom sentimen ke dalam file CSV
df.to_csv('datasetWsentiment.csv', index=False)

import pandas as pd

# Membaca dataset dari file CSV
df = pd.read_csv('dataset_with_sentiment.csv')

# Mengubah label kluster
cluster_labels = {
    1: 'Infrastruktur jalan',
    2: 'Kebijakan pajak',
    3: 'Kebijakan kurikulum pendidikan',
    4: 'Pelayanan pasien BPJS',
    5: 'Kesejahteraan guru',
    6: 'Parkir liar',
    7: 'Peran dan kinerja DPR'
}
df['Cluster'] = df['cluster'].replace(cluster_labels)

# Menghitung jumlah sentimen negatif per cluster
negative_counts = df[df['sentimen'] == 'negative'].groupby('Cluster').size()

# Menghitung jumlah seluruh komentar per cluster
total_counts = df.groupby('Cluster').size()

# Menggabungkan hasil perhitungan menjadi DataFrame baru
result = pd.DataFrame({'Cluster': negative_counts.index, 'Negative_Count': negative_counts, 'Total_Count': total_counts})

# Menghitung presentase sentimen negatif per cluster
result['Percentage'] = (result['Negative_Count'] / result['Total_Count']) * 100

# Melakukan pemeringkatan berdasarkan presentase sentimen negatif secara menurun
result = result.sort_values('Percentage', ascending=False)

# Menambahkan kolom Rank untuk menunjukkan peringkat
result.insert(0, 'Rank', range(1, len(result) + 1))

result

result.to_excel('resultRank.xlsx', index=False)

