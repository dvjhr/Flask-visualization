# -*- coding: utf-8 -*-
"""04_step_ModellingUji [DONE].ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kBGw-Q5insk9Nk1xg6sGBm9clzWU04cQ
"""

import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Membaca dataset dari file CSV
df = pd.read_csv('dataset_with_sentiment.csv')

# Memisahkan fitur dan label
X = df['komentarClean']  # Kolom 'text' berisi teks fitur
y = df['sentimen']  # Kolom 'sentiment' berisi label kelas

# Melakukan vektorisasi teks menggunakan TF-IDF
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(X)

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model KNN
knn = KNeighborsClassifier()
knn.fit(X_train, y_train)
knn_predictions = knn.predict(X_test)
knn_accuracy = accuracy_score(y_test, knn_predictions)

# Inisialisasi model MLP
mlp = MLPClassifier()
mlp.fit(X_train, y_train)
mlp_predictions = mlp.predict(X_test)
mlp_accuracy = accuracy_score(y_test, mlp_predictions)

"""# Model KNN"""

knn_accuracy = accuracy_score(y_test, knn_predictions)
knn_precision = precision_score(y_test, knn_predictions, average='weighted')
knn_recall = recall_score(y_test, knn_predictions, average='weighted')
knn_f1 = f1_score(y_test, knn_predictions, average='weighted')

print("K-Nearest Neighbors (KNN) Metrics:")
print("Accuracy:", knn_accuracy)
print("Precision:", knn_precision)
print("Recall:", knn_recall)
print("F1-score:", knn_f1)

"""# Model MLP"""

# Evaluasi metrik untuk MLP
mlp_accuracy = accuracy_score(y_test, mlp_predictions)
mlp_precision = precision_score(y_test, mlp_predictions, average='weighted')
mlp_recall = recall_score(y_test, mlp_predictions, average='weighted')
mlp_f1 = f1_score(y_test, mlp_predictions, average='weighted')

print("Multi-Layer Perceptron (MLP) Metrics:")
print("Accuracy:", mlp_accuracy)
print("Precision:", mlp_precision)
print("Recall:", mlp_recall)
print("F1-score:", mlp_f1)

"""# Visualisasi"""

import matplotlib.pyplot as plt
import seaborn as sns

# Visualisasi Confusion Matrix
plt.figure(figsize=(12, 4))

plt.subplot(1, 3, 1)
sns.heatmap(nb_cm, annot=True, fmt='d', cmap='Greens', cbar=False)
plt.title('Naive Bayes Confusion Matrix')

plt.subplot(1, 3, 2)
sns.heatmap(svm_cm, annot=True, fmt='d', cmap='Greens', cbar=False)
plt.title('SVM Confusion Matrix')

plt.subplot(1, 3, 3)
sns.heatmap(dt_cm, annot=True, fmt='d', cmap='Greens', cbar=False)
plt.title('Decision Tree Confusion Matrix')

plt.tight_layout()
plt.show()

